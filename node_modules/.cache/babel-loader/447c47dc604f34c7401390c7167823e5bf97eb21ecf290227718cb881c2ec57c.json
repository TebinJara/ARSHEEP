{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Insertar orden de trabajo\nexport const insertarOrdenTrabajo = async ordenTrabajo => {\n  try {\n    const response = await apiClient.post('/orden_trabajo', ordenTrabajo);\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al insertar la orden de trabajo:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\nexport const obtenerClientes = async () => {\n  try {\n    const response = await apiClient.get('/clientes');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\nexport const obtenerEmpleados = async () => {\n  try {\n    const response = await apiClient.get('/empleados');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\n// Subir imagen\nexport const subirImagen = async (file, folder = 'img1') => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await apiClient.post(`/subirImagen/${folder}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al subir la imagen:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","insertarOrdenTrabajo","ordenTrabajo","response","post","data","error","console","message","obtenerClientes","get","obtenerEmpleados","subirImagen","file","folder","formData","FormData","append"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/OtService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Insertar orden de trabajo\r\nexport const insertarOrdenTrabajo = async (ordenTrabajo) => {\r\n    try {\r\n        const response = await apiClient.post('/orden_trabajo', ordenTrabajo);\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al insertar la orden de trabajo:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\nexport const obtenerClientes = async () => {\r\n    try {\r\n        const response = await apiClient.get('/clientes');\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al obtener los clientes:', error.message);\r\n        return []; // Retorna un array vacío en caso de error\r\n    }\r\n};\r\n\r\nexport const obtenerEmpleados = async () => {\r\n    try {\r\n        const response = await apiClient.get('/empleados');\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al obtener los clientes:', error.message);\r\n        return []; // Retorna un array vacío en caso de error\r\n    }\r\n};\r\n// Subir imagen\r\nexport const subirImagen = async (file, folder = 'img1') => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await apiClient.post(`/subirImagen/${folder}`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al subir la imagen:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,YAAY,IAAK;EACxD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,IAAI,CAAC,gBAAgB,EAAEF,YAAY,CAAC;IACrE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMN,SAAS,CAACa,GAAG,CAAC,WAAW,CAAC;IACjD,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMN,SAAS,CAACa,GAAG,CAAC,YAAY,CAAC;IAClD,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;AACD;AACA,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,GAAG,MAAM,KAAK;EACxD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7B,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMN,SAAS,CAACO,IAAI,CAAE,gBAAeU,MAAO,EAAC,EAAEC,QAAQ,EAAE;MACtEf,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}