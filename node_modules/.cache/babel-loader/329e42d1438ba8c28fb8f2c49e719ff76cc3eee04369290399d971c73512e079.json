{"ast":null,"code":"import axios from 'axios';\nimport { createClient } from '@supabase/supabase-js';\nconst supaClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst API_URL = 'http://localhost:3001/api';\nexport const obtenerUsuario = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('USUARIO').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerOrdenesDeTrabajo = async rutUsuario => {\n  const {\n    data,\n    error\n  } = await supabase.from('ORDEN_TRABAJO').select('*').eq('numrun_cliente', rutUsuario);\n  if (error) throw error;\n  return data;\n};\nexport const obtenerEmpleadoPorId = async idEmpleado => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\n  if (error) throw error;\n  return data;\n};\nexport const obtenerStatusPorId = async idStatus => {\n  const {\n    data,\n    error\n  } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\n  if (error) throw error;\n  return data;\n};\n//cambio\n// Insertar orden de trabajo\nexport const insertarOrdenTrabajo = async ordenTrabajo => {\n  try {\n    const response = await supaClient.post('/orden_trabajo', ordenTrabajo);\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al insertar la orden de trabajo:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\nexport const obtenerClientes = async () => {\n  const response = await axios.get(`${API_URL}/clientes`);\n  return response.data;\n};\nexport const obtenerEmpleados = async () => {\n  const response = await axios.get(`${API_URL}/empleados`);\n  return response.data;\n};\n// Subir imagen\nexport const subirImagen = async (file, folder = 'img1') => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await supaClient.post(`/subirImagen/${folder}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al subir la imagen:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\nexport default supaClient;","map":{"version":3,"names":["axios","createClient","supaClient","create","baseURL","headers","supabaseUrl","supabaseKey","supabase","API_URL","obtenerUsuario","data","error","from","select","obtenerOrdenesDeTrabajo","rutUsuario","eq","obtenerEmpleadoPorId","idEmpleado","single","obtenerStatusPorId","idStatus","insertarOrdenTrabajo","ordenTrabajo","response","post","console","message","obtenerClientes","get","obtenerEmpleados","subirImagen","file","folder","formData","FormData","append"],"sources":["C:/Users/felip/OneDrive/Documentos/GitHub/ARSHEEP/src/services/supa.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supaClient = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\nexport const obtenerUsuario = async () => {\r\n    const { data, error } = await supabase.from('USUARIO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerOrdenesDeTrabajo = async (rutUsuario) => {\r\n    const { data, error } = await supabase\r\n        .from('ORDEN_TRABAJO')\r\n        .select('*')\r\n        .eq('numrun_cliente', rutUsuario);\r\n\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerEmpleadoPorId = async (idEmpleado) => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerStatusPorId = async (idStatus) => {\r\n    const { data, error } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n//cambio\r\n// Insertar orden de trabajo\r\nexport const insertarOrdenTrabajo = async (ordenTrabajo) => {\r\n    try {\r\n        const response = await supaClient.post('/orden_trabajo', ordenTrabajo);\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al insertar la orden de trabajo:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\nexport const obtenerClientes = async () => {\r\n    const response = await axios.get(`${API_URL}/clientes`);\r\n    return response.data;\r\n};\r\n\r\nexport const obtenerEmpleados = async () => {\r\n    const response = await axios.get(`${API_URL}/empleados`);\r\n    return response.data;\r\n};\r\n// Subir imagen\r\nexport const subirImagen = async (file, folder = 'img1') => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await supaClient.post(`/subirImagen/${folder}`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al subir la imagen:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\nexport default supaClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}