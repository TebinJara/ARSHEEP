{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Obtener todos los clientes\nexport const obtenerClientes = async () => {\n  try {\n    const response = await apiClient.get('/clientes');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\n\n// Obtener un cliente por ID\nexport const obtenerClientePorId = async id => {\n  try {\n    const response = await apiClient.get(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el cliente por ID:', error.message);\n    return null;\n  }\n};\nexport const crearCliente = async formData => {\n  try {\n    const response = await apiClient.post('/clientes', formData);\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear un cliente:', error.message);\n    return {\n      error: error.response.data\n    }; // Devuelve el error de la respuesta\n  }\n};\n\n// Actualizar un cliente\nexport const actualizarCliente = async (id, cliente) => {\n  try {\n    const response = await apiClient.put(`/clientes/${id}`, cliente);\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar el cliente:', error.message);\n    return null;\n  }\n};\n\n// Eliminar un cliente\nexport const eliminarCliente = async id => {\n  try {\n    const response = await apiClient.delete(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el cliente:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","obtenerClientes","response","get","data","error","console","message","obtenerClientePorId","id","crearCliente","formData","post","actualizarCliente","cliente","put","eliminarCliente","delete"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/ClienteService.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// Obtener todos los clientes\nexport const obtenerClientes = async () => {\n    try {\n        const response = await apiClient.get('/clientes');\n        return response.data; // Devuelve los datos recibidos del servidor\n    } catch (error) {\n        console.error('Error al obtener los clientes:', error.message);\n        return []; // Retorna un array vacío en caso de error\n    }\n};\n\n// Obtener un cliente por ID\nexport const obtenerClientePorId = async (id) => {\n    try {\n        const response = await apiClient.get(`/clientes/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error al obtener el cliente por ID:', error.message);\n        return null;\n    }\n};\n\nexport const crearCliente = async (formData) => {\n    try {\n        const response = await apiClient.post('/clientes', formData);\n        return response.data;\n    } catch (error) {\n        console.error('Error al crear un cliente:', error.message);\n        return { error: error.response.data }; // Devuelve el error de la respuesta\n    }\n};\n\n\n// Actualizar un cliente\nexport const actualizarCliente = async (id, cliente) => {\n    try {\n        const response = await apiClient.put(`/clientes/${id}`, cliente);\n        return response.data;\n    } catch (error) {\n        console.error('Error al actualizar el cliente:', error.message);\n        return null;\n    }\n};\n\n// Eliminar un cliente\nexport const eliminarCliente = async (id) => {\n    try {\n        const response = await apiClient.delete(`/clientes/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error al eliminar el cliente:', error.message);\n        return null;\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,WAAW,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC7C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAE,aAAYM,EAAG,EAAC,CAAC;IACvD,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACnE,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAML,SAAS,CAACe,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC;IAC5D,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D,OAAO;MAAEF,KAAK,EAAEA,KAAK,CAACH,QAAQ,CAACE;IAAK,CAAC,CAAC,CAAC;EAC3C;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMS,iBAAiB,GAAG,MAAAA,CAAOJ,EAAE,EAAEK,OAAO,KAAK;EACpD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAML,SAAS,CAACkB,GAAG,CAAE,aAAYN,EAAG,EAAC,EAAEK,OAAO,CAAC;IAChE,OAAOZ,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC/D,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,eAAe,GAAG,MAAOP,EAAE,IAAK;EACzC,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,SAAS,CAACoB,MAAM,CAAE,aAAYR,EAAG,EAAC,CAAC;IAC1D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7D,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}