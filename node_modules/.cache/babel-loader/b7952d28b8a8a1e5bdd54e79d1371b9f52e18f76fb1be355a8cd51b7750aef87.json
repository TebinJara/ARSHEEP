{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api/clientes',\n  // Base URL del backend\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Obtener todos los clientes con relaciones\nexport const getClientes = async () => {\n  try {\n    const response = await api.get('/clientes');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return [];\n  }\n};\n\n// Obtener todos los tipos declientes con relaciones\nexport const getTiposClientes = async () => {\n  try {\n    const response = await api.get('/tiposclientes');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los tipos de clientes:', error.message);\n    return [];\n  }\n};\n\n// Obtener un cliente por ID con relaciones\nexport const getClienteById = async id => {\n  try {\n    const response = await api.get(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el cliente por ID:', error.message);\n    return null;\n  }\n};\n\n// Crear un nuevo cliente\nexport const createCliente = async clienteData => {\n  try {\n    const response = await api.post('/clientes', clienteData);\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear el cliente:', error.message);\n    return null;\n  }\n};\n\n// Actualizar un cliente por ID\nexport const updateCliente = async (id, clienteData) => {\n  try {\n    const response = await api.put(`/clientes/${id}`, clienteData);\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar el cliente:', error.message);\n    return null;\n  }\n};\n\n// Eliminar un cliente por ID\nexport const deleteCliente = async id => {\n  try {\n    const response = await api.delete(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el cliente:', error.message);\n    return null;\n  }\n};\nexport const subirImagenUsuarioEmpleado = async formData => {\n  try {\n    const response = await api.post('/clientes/uploadImage', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al subir la imagen del usuario:', error.message);\n    return null; // Retorna null en caso de error\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","getClientes","response","get","data","error","console","message","getTiposClientes","getClienteById","id","createCliente","clienteData","post","updateCliente","put","deleteCliente","delete","subirImagenUsuarioEmpleado","formData"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/clienteService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3001/api/clientes', // Base URL del backend\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Obtener todos los clientes con relaciones\r\nexport const getClientes = async () => {\r\n    try {\r\n        const response = await api.get('/clientes');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener los clientes:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener todos los tipos declientes con relaciones\r\nexport const getTiposClientes = async () => {\r\n    try {\r\n        const response = await api.get('/tiposclientes');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener los tipos de clientes:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener un cliente por ID con relaciones\r\nexport const getClienteById = async (id) => {\r\n    try {\r\n        const response = await api.get(`/clientes/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener el cliente por ID:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Crear un nuevo cliente\r\nexport const createCliente = async (clienteData) => {\r\n    try {\r\n        const response = await api.post('/clientes', clienteData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al crear el cliente:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Actualizar un cliente por ID\r\nexport const updateCliente = async (id, clienteData) => {\r\n    try {\r\n        const response = await api.put(`/clientes/${id}`, clienteData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al actualizar el cliente:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Eliminar un cliente por ID\r\nexport const deleteCliente = async (id) => {\r\n    try {\r\n        const response = await api.delete(`/clientes/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al eliminar el cliente:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const subirImagenUsuarioEmpleado = async (formData) => {\r\n    try {\r\n        const response = await api.post('/clientes/uploadImage', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al subir la imagen del usuario:', error.message);\r\n        return null; // Retorna null en caso de error\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}