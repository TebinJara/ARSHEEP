{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nexport const supabase = createClient(\"https://niqxbeaxtqofvrboxnzb.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc\");\n\n// Función obtener datos clientes\nexport const obtenerClientes = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('CLIENTE').select('*'); // Seleccionar todos los campos\n\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Error al obtener los datos de la tabla de clientes:', error.message);\n    return null;\n  }\n};\n\n// Función obtener datos usuario\nexport const obtenerUsuario = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('USUARIO').select('*'); // Seleccionar todos los campos\n\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Error al obtener los datos de la tabla de clientes:', error.message);\n    return null;\n  }\n};\nexport const obtenerOrdenesDeTrabajo = async () => {\n  try {\n    let {\n      data,\n      error\n    } = await supabase.from('ORDEN_TRABAJO') // Nombre de la tabla en tu base de datos\n    .select('*');\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error al obtener órdenes de trabajo:', error);\n    return null;\n  }\n};\nexport const obtenerEmpleadoPorId = async idEmpleado => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('EMPLEADO').select('id_empleado, pnombre, snombre, apaterno, amaterno').eq('id_empleado', idEmpleado).single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error al obtener el empleado por ID:', error);\n    return null;\n  }\n};\nexport const obtenerStatusPorId = async idStatus => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error al obtener el status por ID:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["createClient","supabase","obtenerClientes","data","error","from","select","console","message","obtenerUsuario","obtenerOrdenesDeTrabajo","obtenerEmpleadoPorId","idEmpleado","eq","single","obtenerStatusPorId","idStatus"],"sources":["C:/Users/felip/OneDrive/Documentos/GitHub/ARSHEEP/src/services/supa.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n   \"https://niqxbeaxtqofvrboxnzb.supabase.co\",\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc\"\r\n);\r\n\r\n// Función obtener datos clientes\r\nexport const obtenerClientes = async () => {\r\n    try {        \r\n        const { data, error } = await supabase\r\n            .from('CLIENTE')\r\n            .select('*'); // Seleccionar todos los campos\r\n\r\n        if (error) {\r\n            throw error;\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al obtener los datos de la tabla de clientes:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Función obtener datos usuario\r\nexport const obtenerUsuario = async () => {\r\n    try {        \r\n        const { data, error } = await supabase\r\n            .from('USUARIO')\r\n            .select('*'); // Seleccionar todos los campos\r\n\r\n        if (error) {\r\n            throw error;\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al obtener los datos de la tabla de clientes:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const obtenerOrdenesDeTrabajo = async () => {\r\n    try {\r\n        let { data, error } = await supabase\r\n            .from('ORDEN_TRABAJO') // Nombre de la tabla en tu base de datos\r\n            .select('*');\r\n        if (error) throw error;\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al obtener órdenes de trabajo:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const obtenerEmpleadoPorId = async (idEmpleado) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('EMPLEADO')\r\n            .select('id_empleado, pnombre, snombre, apaterno, amaterno')\r\n            .eq('id_empleado', idEmpleado)\r\n            .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al obtener el empleado por ID:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const obtenerStatusPorId = async (idStatus) => {\r\n    try {\r\n        const { data, error } = await supabase\r\n            .from('TIPO_STATUS')\r\n            .select('*')\r\n            .eq('status', idStatus)\r\n            .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al obtener el status por ID:', error);\r\n        return null;\r\n    }\r\n};"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,OAAO,MAAMC,QAAQ,GAAGD,YAAY,CACjC,0CAA0C,EACzC,kNACJ,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CACjCI,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;IAElB,IAAIF,KAAK,EAAE;MACP,MAAMA,KAAK;IACf;IAEA,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAACI,OAAO,CAAC;IACnF,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAM;MAAEN,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CACjCI,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;IAElB,IAAIF,KAAK,EAAE;MACP,MAAMA,KAAK;IACf;IAEA,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAACI,OAAO,CAAC;IACnF,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAME,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC/C,IAAI;IACA,IAAI;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CAC/BI,IAAI,CAAC,eAAe,CAAC,CAAC;IAAA,CACtBC,MAAM,CAAC,GAAG,CAAC;IAChB,IAAIF,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,IAAI;EACf;AACJ,CAAC;AACD,OAAO,MAAMO,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACtD,IAAI;IACA,MAAM;MAAET,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CACjCI,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,mDAAmD,CAAC,CAC3DO,EAAE,CAAC,aAAa,EAAED,UAAU,CAAC,CAC7BE,MAAM,CAAC,CAAC;IAEb,IAAIV,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAMW,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACA,MAAM;MAAEb,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CACjCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXO,EAAE,CAAC,QAAQ,EAAEG,QAAQ,CAAC,CACtBF,MAAM,CAAC,CAAC;IAEb,IAAIV,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZG,OAAO,CAACH,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}