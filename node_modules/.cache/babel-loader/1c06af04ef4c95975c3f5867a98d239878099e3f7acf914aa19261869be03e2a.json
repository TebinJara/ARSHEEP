{"ast":null,"code":"import axios from 'axios';\nimport { createClient } from '@supabase/supabase-js';\nconst supaClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nexport const obtenerUsuario = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('USUARIO').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerOrdenesDeTrabajo = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('ORDEN_TRABAJO').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerEmpleadoPorId = async idEmpleado => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\n  if (error) throw error;\n  return data;\n};\nexport const obtenerStatusPorId = async idStatus => {\n  const {\n    data,\n    error\n  } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\n  if (error) throw error;\n  return data;\n};\n//cambio\n// Insertar orden de trabajo\nexport const insertarOrdenTrabajo = async ordenTrabajo => {\n  try {\n    const response = await supaClient.post('/orden_trabajo', ordenTrabajo);\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al insertar la orden de trabajo:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\n\n// Obtener todos los empleados\nexport const obtenerEmpleados = async () => {\n  try {\n    const response = await supaClient.get('/empleados');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los empleados:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\n\n// Obtener todos los clientes\nexport const obtenerClientes = async () => {\n  try {\n    const response = await supaClient.get('/clientes');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\n\n// Subir imagen\nexport const subirImagen = async (file, folder = 'img1') => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await supaClient.post(`/subirImagen/${folder}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al subir la imagen:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\nexport default supaClient;","map":{"version":3,"names":["axios","createClient","supaClient","create","baseURL","headers","supabaseUrl","supabaseKey","supabase","obtenerUsuario","data","error","from","select","obtenerOrdenesDeTrabajo","obtenerEmpleadoPorId","idEmpleado","eq","single","obtenerStatusPorId","idStatus","insertarOrdenTrabajo","ordenTrabajo","response","post","console","message","obtenerEmpleados","get","obtenerClientes","subirImagen","file","folder","formData","FormData","append"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/supa.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supaClient = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n\r\nexport const obtenerUsuario = async () => {\r\n    const { data, error } = await supabase.from('USUARIO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerOrdenesDeTrabajo = async () => {\r\n    const { data, error } = await supabase.from('ORDEN_TRABAJO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerEmpleadoPorId = async (idEmpleado) => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerStatusPorId = async (idStatus) => {\r\n    const { data, error } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n//cambio\r\n// Insertar orden de trabajo\r\nexport const insertarOrdenTrabajo = async (ordenTrabajo) => {\r\n    try {\r\n        const response = await supaClient.post('/orden_trabajo', ordenTrabajo);\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al insertar la orden de trabajo:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\n// Obtener todos los empleados\r\nexport const obtenerEmpleados = async () => {\r\n    try {\r\n        const response = await supaClient.get('/empleados');\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al obtener los empleados:', error.message);\r\n        return []; // Retorna un array vacío en caso de error\r\n    }\r\n};\r\n\r\n// Obtener todos los clientes\r\nexport const obtenerClientes = async () => {\r\n    try {\r\n        const response = await supaClient.get('/clientes');\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al obtener los clientes:', error.message);\r\n        return []; // Retorna un array vacío en caso de error\r\n    }\r\n};\r\n\r\n// Subir imagen\r\nexport const subirImagen = async (file, folder = 'img1') => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await supaClient.post(`/subirImagen/${folder}`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al subir la imagen:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\nexport default supaClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}