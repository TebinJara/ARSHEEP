{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Obtener todas las regiones\nexport const obtenerRegiones = async () => {\n  try {\n    const response = await api.get('/regionComuna/regiones');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las regiones:', error.message);\n    return [];\n  }\n};\n\n// Obtener todas las regiones\nexport const obtenerComunas = async () => {\n  try {\n    const response = await api.get('/regionComuna/comunas');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las regiones:', error.message);\n    return [];\n  }\n};\n\n// Obtener comunas por ID de región\nexport const obtenerComunasPorRegion = async id_region => {\n  try {\n    const response = await api.get(`/regiones/${id_region}/comunas`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las comunas:', error.message);\n    return [];\n  }\n};\n\n// Obtener una región por ID\nexport const obtenerRegionPorId = async id => {\n  try {\n    const response = await api.get(`/regiones/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener la región por ID:', error.message);\n    return null;\n  }\n};\n\n// Obtener una comuna por ID\nexport const obtenerComunaPorId = async id => {\n  try {\n    const response = await api.get(`/comunas/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener la comuna por ID:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","obtenerRegiones","response","get","data","error","console","message","obtenerComunas","obtenerComunasPorRegion","id_region","obtenerRegionPorId","id","obtenerComunaPorId"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/RegionComunaService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Obtener todas las regiones\r\nexport const obtenerRegiones = async () => {\r\n    try {\r\n        const response = await api.get('/regionComuna/regiones');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener las regiones:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener todas las regiones\r\nexport const obtenerComunas = async () => {\r\n    try {\r\n        const response = await api.get('/regionComuna/comunas');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener las regiones:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener comunas por ID de región\r\nexport const obtenerComunasPorRegion = async (id_region) => {\r\n    try {\r\n        const response = await api.get(`/regiones/${id_region}/comunas`);\r\n        return response.data;\r\n       \r\n    } catch (error) {\r\n        console.error('Error al obtener las comunas:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener una región por ID\r\nexport const obtenerRegionPorId = async (id) => {\r\n    try {\r\n        const response = await api.get(`/regiones/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener la región por ID:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Obtener una comuna por ID\r\nexport const obtenerComunaPorId = async (id) => {\r\n    try {\r\n        const response = await api.get(`/comunas/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener la comuna por ID:', error.message);\r\n        return null;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,uBAAuB,GAAG,MAAOC,SAAS,IAAK;EACxD,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAaO,SAAS,UAAU,CAAC;IAChE,OAAOR,QAAQ,CAACE,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7D,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAG,MAAOC,EAAE,IAAK;EAC5C,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAaS,EAAE,EAAE,CAAC;IACjD,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAClE,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,kBAAkB,GAAG,MAAOD,EAAE,IAAK;EAC5C,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,YAAYS,EAAE,EAAE,CAAC;IAChD,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAClE,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}