{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Obtener todos los clientes\nexport const obtenerClientes = async () => {\n  try {\n    const response = await apiClient.get('/clientes');\n    return response.data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al obtener los clientes:', error.message);\n    return []; // Retorna un array vacío en caso de error\n  }\n};\n\n// Obtener un cliente por ID\nexport const obtenerClientePorId = async id => {\n  try {\n    const response = await apiClient.get(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el cliente por ID:', error.message);\n    return null;\n  }\n};\n\n// Crear un nuevo cliente\nexport const crearCliente = async cliente => {\n  try {\n    const response = await apiClient.post('/clientes', cliente);\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear un cliente:', error.message);\n    return null;\n  }\n};\n\n// Actualizar un cliente\nexport const actualizarCliente = async (id, cliente) => {\n  try {\n    const response = await apiClient.put(`/clientes/${id}`, cliente);\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar el cliente:', error.message);\n    return null;\n  }\n};\n\n// Eliminar un cliente\nexport const eliminarCliente = async id => {\n  try {\n    const response = await apiClient.delete(`/clientes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el cliente:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","obtenerClientes","response","get","data","error","console","message","obtenerClientePorId","id","crearCliente","cliente","post","actualizarCliente","put","eliminarCliente","delete"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/ClienteService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Obtener todos los clientes\r\nexport const obtenerClientes = async () => {\r\n    try {\r\n        const response = await apiClient.get('/clientes');\r\n        return response.data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al obtener los clientes:', error.message);\r\n        return []; // Retorna un array vacío en caso de error\r\n    }\r\n};\r\n\r\n// Obtener un cliente por ID\r\nexport const obtenerClientePorId = async (id) => {\r\n    try {\r\n        const response = await apiClient.get(`/clientes/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener el cliente por ID:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Crear un nuevo cliente\r\nexport const crearCliente = async (cliente) => {\r\n    try {\r\n        const response = await apiClient.post('/clientes', cliente);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al crear un cliente:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Actualizar un cliente\r\nexport const actualizarCliente = async (id, cliente) => {\r\n    try {\r\n        const response = await apiClient.put(`/clientes/${id}`, cliente);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al actualizar el cliente:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Eliminar un cliente\r\nexport const eliminarCliente = async (id) => {\r\n    try {\r\n        const response = await apiClient.delete(`/clientes/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al eliminar el cliente:', error.message);\r\n        return null;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,WAAW,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC7C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAE,aAAYM,EAAG,EAAC,CAAC;IACvD,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACnE,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC3C,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAML,SAAS,CAACe,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC;IAC3D,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,iBAAiB,GAAG,MAAAA,CAAOJ,EAAE,EAAEE,OAAO,KAAK;EACpD,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAE,aAAYL,EAAG,EAAC,EAAEE,OAAO,CAAC;IAChE,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC/D,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMQ,eAAe,GAAG,MAAON,EAAE,IAAK;EACzC,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,SAAS,CAACmB,MAAM,CAAE,aAAYP,EAAG,EAAC,CAAC;IAC1D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC7D,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}