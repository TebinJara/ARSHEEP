{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst API_URL = 'http://localhost:3001/api';\n\n// Obtener usuario\nexport const obtenerUsuario = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('USUARIO').select('*');\n  if (error) throw error;\n  return data;\n};\n\n// Obtener órdenes de trabajo\nexport const obtenerOrdenesDeTrabajo = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('ORDEN_TRABAJO').select('*');\n  if (error) throw error;\n  return data;\n};\n\n// Obtener empleado por ID\nexport const obtenerEmpleadoPorId = async idEmpleado => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\n  if (error) throw error;\n  return data;\n};\n\n// Obtener status por ID\nexport const obtenerStatusPorId = async idStatus => {\n  const {\n    data,\n    error\n  } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\n  if (error) throw error;\n  return data;\n};\n\n// Insertar orden de trabajo\nexport const insertarOrdenTrabajo = async ordenTrabajo => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('ORDEN_TRABAJO').insert([ordenTrabajo]);\n    if (error) throw error;\n    return data; // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al insertar la orden de trabajo:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\n\n// Obtener clientes\nexport const obtenerClientes = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('CLIENTE').select('*');\n  if (error) throw error;\n  return data;\n};\n\n// Obtener empleados\nexport const obtenerEmpleados = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('*');\n  if (error) throw error;\n  return data;\n};\n\n// Subir imagen\nexport const subirImagen = async (file, folder = 'img1') => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch(`${API_URL}/subirImagen/${folder}`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(`HTTP error! Status: ${response.status}, Message: ${errorMessage}`);\n    }\n    return await response.json(); // Devuelve los datos recibidos del servidor\n  } catch (error) {\n    console.error('Error al subir la imagen:', error.message);\n    throw error; // Lanza el error para que el componente que llama pueda manejarlo\n  }\n};\nexport default supabase;","map":{"version":3,"names":["createClient","supabaseUrl","supabaseKey","supabase","API_URL","obtenerUsuario","data","error","from","select","obtenerOrdenesDeTrabajo","obtenerEmpleadoPorId","idEmpleado","eq","single","obtenerStatusPorId","idStatus","insertarOrdenTrabajo","ordenTrabajo","insert","console","message","obtenerClientes","obtenerEmpleados","subirImagen","file","folder","formData","FormData","append","response","fetch","method","body","ok","errorMessage","text","Error","status","json"],"sources":["C:/Users/felip/OneDrive/Documentos/GitHub/ARSHEEP/src/services/supa.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\n// Obtener usuario\r\nexport const obtenerUsuario = async () => {\r\n    const { data, error } = await supabase.from('USUARIO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Obtener órdenes de trabajo\r\nexport const obtenerOrdenesDeTrabajo = async () => {\r\n    const { data, error } = await supabase.from('ORDEN_TRABAJO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Obtener empleado por ID\r\nexport const obtenerEmpleadoPorId = async (idEmpleado) => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Obtener status por ID\r\nexport const obtenerStatusPorId = async (idStatus) => {\r\n    const { data, error } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Insertar orden de trabajo\r\nexport const insertarOrdenTrabajo = async (ordenTrabajo) => {\r\n    try {\r\n        const { data, error } = await supabase.from('ORDEN_TRABAJO').insert([ordenTrabajo]);\r\n        if (error) throw error;\r\n        return data; // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al insertar la orden de trabajo:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\n// Obtener clientes\r\nexport const obtenerClientes = async () => {\r\n    const { data, error } = await supabase.from('CLIENTE').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Obtener empleados\r\nexport const obtenerEmpleados = async () => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\n// Subir imagen\r\nexport const subirImagen = async (file, folder = 'img1') => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await fetch(`${API_URL}/subirImagen/${folder}`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(`HTTP error! Status: ${response.status}, Message: ${errorMessage}`);\r\n        }\r\n\r\n        return await response.json(); // Devuelve los datos recibidos del servidor\r\n    } catch (error) {\r\n        console.error('Error al subir la imagen:', error.message);\r\n        throw error; // Lanza el error para que el componente que llama pueda manejarlo\r\n    }\r\n};\r\n\r\nexport default supabase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}