{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Función auxiliar para manejar las solicitudes API\nconst handleRequest = async (requestFunc, successMessage) => {\n  try {\n    const response = await requestFunc();\n    console.log(successMessage);\n    return response.data;\n  } catch (error) {\n    console.error(`${successMessage} fallida:`, error.message);\n    if (error.response) {\n      console.error('Detalles del error:', error.response.data);\n      return {\n        error: error.response.data\n      };\n    }\n    return {\n      error: 'Ocurrió un error inesperado'\n    };\n  }\n};\n\n// Obtener todos los clientes\nexport const obtenerClientes = async () => {\n  return await handleRequest(() => apiClient.get('/clientes'), 'Obteniendo clientes');\n};\n\n// Obtener un cliente por ID\nexport const obtenerClientePorId = async id => {\n  return await handleRequest(() => apiClient.get(`/clientes/${id}`), 'Obteniendo cliente por ID');\n};\n\n// Crear un nuevo cliente\nexport const crearCliente = async formData => {\n  return await handleRequest(() => apiClient.post('/clientes', formData), 'Creando cliente');\n};\n\n// Actualizar un cliente\nexport const actualizarCliente = async (id, cliente) => {\n  return await handleRequest(() => apiClient.put(`/clientes/${id}`, cliente), 'Actualizando cliente');\n};\n\n// Eliminar un cliente\nexport const eliminarCliente = async id => {\n  return await handleRequest(() => apiClient.delete(`/clientes/${id}`), 'Eliminando cliente');\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","handleRequest","requestFunc","successMessage","response","console","log","data","error","message","obtenerClientes","get","obtenerClientePorId","id","crearCliente","formData","post","actualizarCliente","cliente","put","eliminarCliente","delete"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/clienteService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Función auxiliar para manejar las solicitudes API\r\nconst handleRequest = async (requestFunc, successMessage) => {\r\n    try {\r\n        const response = await requestFunc();\r\n        console.log(successMessage);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(`${successMessage} fallida:`, error.message);\r\n        if (error.response) {\r\n            console.error('Detalles del error:', error.response.data);\r\n            return { error: error.response.data };\r\n        }\r\n        return { error: 'Ocurrió un error inesperado' };\r\n    }\r\n};\r\n\r\n// Obtener todos los clientes\r\nexport const obtenerClientes = async () => {\r\n    return await handleRequest(\r\n        () => apiClient.get('/clientes'),\r\n        'Obteniendo clientes'\r\n    );\r\n};\r\n\r\n// Obtener un cliente por ID\r\nexport const obtenerClientePorId = async (id) => {\r\n    return await handleRequest(\r\n        () => apiClient.get(`/clientes/${id}`),\r\n        'Obteniendo cliente por ID'\r\n    );\r\n};\r\n\r\n// Crear un nuevo cliente\r\nexport const crearCliente = async (formData) => {\r\n    return await handleRequest(\r\n        () => apiClient.post('/clientes', formData),\r\n        'Creando cliente'\r\n    );\r\n};\r\n\r\n// Actualizar un cliente\r\nexport const actualizarCliente = async (id, cliente) => {\r\n    return await handleRequest(\r\n        () => apiClient.put(`/clientes/${id}`, cliente),\r\n        'Actualizando cliente'\r\n    );\r\n};\r\n\r\n// Eliminar un cliente\r\nexport const eliminarCliente = async (id) => {\r\n    return await handleRequest(\r\n        () => apiClient.delete(`/clientes/${id}`),\r\n        'Eliminando cliente'\r\n    );\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAG,MAAAA,CAAOC,WAAW,EAAEC,cAAc,KAAK;EACzD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,WAAW,CAAC,CAAC;IACpCG,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;IAC3B,OAAOC,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,GAAGL,cAAc,WAAW,EAAEK,KAAK,CAACC,OAAO,CAAC;IAC1D,IAAID,KAAK,CAACJ,QAAQ,EAAE;MAChBC,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAAC;MACzD,OAAO;QAAEC,KAAK,EAAEA,KAAK,CAACJ,QAAQ,CAACG;MAAK,CAAC;IACzC;IACA,OAAO;MAAEC,KAAK,EAAE;IAA8B,CAAC;EACnD;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,OAAO,MAAMT,aAAa,CACtB,MAAMJ,SAAS,CAACc,GAAG,CAAC,WAAW,CAAC,EAChC,qBACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC7C,OAAO,MAAMZ,aAAa,CACtB,MAAMJ,SAAS,CAACc,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC,EACtC,2BACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,OAAO,MAAMd,aAAa,CACtB,MAAMJ,SAAS,CAACmB,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC,EAC3C,iBACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAOJ,EAAE,EAAEK,OAAO,KAAK;EACpD,OAAO,MAAMjB,aAAa,CACtB,MAAMJ,SAAS,CAACsB,GAAG,CAAC,aAAaN,EAAE,EAAE,EAAEK,OAAO,CAAC,EAC/C,sBACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAOP,EAAE,IAAK;EACzC,OAAO,MAAMZ,aAAa,CACtB,MAAMJ,SAAS,CAACwB,MAAM,CAAC,aAAaR,EAAE,EAAE,CAAC,EACzC,oBACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}