{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api/regionesComuna',\n  // Asegúrate de que esta sea la URL correcta\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Obtener todas las regiones\nexport const getRegiones = async () => {\n  try {\n    const response = await api.get('/regiones');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las regiones:', error.message);\n    return [];\n  }\n};\n\n// Obtener una región por ID\nexport const getRegionById = async id => {\n  try {\n    const response = await api.get(`/regiones/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener la región por ID:', error.message);\n    return null;\n  }\n};\n\n// Crear una nueva región\nexport const createRegion = async desc_region => {\n  try {\n    const response = await api.post('/regiones', {\n      desc_region\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear la región:', error.message);\n    return null;\n  }\n};\n\n// Actualizar una región por ID\nexport const updateRegion = async (id, desc_region) => {\n  try {\n    const response = await api.put(`/regiones/${id}`, {\n      desc_region\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar la región:', error.message);\n    return null;\n  }\n};\n\n// Eliminar una región por ID\nexport const deleteRegion = async id => {\n  try {\n    const response = await api.delete(`/regiones/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar la región:', error.message);\n    return null;\n  }\n};\n\n// Obtener todas las comunas\nexport const getComunas = async () => {\n  try {\n    const response = await api.get('/comunas');\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las comunas:', error.message);\n    return [];\n  }\n};\n\n// Obtener una comuna por ID\nexport const getComunaById = async id => {\n  try {\n    const response = await api.get(`/comunas/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener la comuna por ID:', error.message);\n    return null;\n  }\n};\n\n// Obtener todas las comunas por ID de región\nexport const getComunasByRegion = async id_region => {\n  try {\n    const response = await api.get(`/comunasregion/${id_region}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener las comunas por ID de región:', error.message);\n    return [];\n  }\n};\n\n// Crear una nueva comuna\nexport const createComuna = async (desc_comuna, id_region) => {\n  try {\n    const response = await api.post('/comunas', {\n      desc_comuna,\n      id_region\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al crear la comuna:', error.message);\n    return null;\n  }\n};\n\n// Actualizar una comuna por ID\nexport const updateComuna = async (id, desc_comuna, id_region) => {\n  try {\n    const response = await api.put(`/comunas/${id}`, {\n      desc_comuna,\n      id_region\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al actualizar la comuna:', error.message);\n    return null;\n  }\n};\n\n// Eliminar una comuna por ID\nexport const deleteComuna = async id => {\n  try {\n    const response = await api.delete(`/comunas/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar la comuna:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","getRegiones","response","get","data","error","console","message","getRegionById","id","createRegion","desc_region","post","updateRegion","put","deleteRegion","delete","getComunas","getComunaById","getComunasByRegion","id_region","createComuna","desc_comuna","updateComuna","deleteComuna"],"sources":["C:/Users/esteb/OneDrive/Escritorio/pt/ARSHEEP/src/services/RegionComunaService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3001/api/regionesComuna', // Asegúrate de que esta sea la URL correcta\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Obtener todas las regiones\r\nexport const getRegiones = async () => {\r\n    try {\r\n        const response = await api.get('/regiones');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener las regiones:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener una región por ID\r\nexport const getRegionById = async (id) => {\r\n    try {\r\n        const response = await api.get(`/regiones/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener la región por ID:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Crear una nueva región\r\nexport const createRegion = async (desc_region) => {\r\n    try {\r\n        const response = await api.post('/regiones', { desc_region });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al crear la región:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Actualizar una región por ID\r\nexport const updateRegion = async (id, desc_region) => {\r\n    try {\r\n        const response = await api.put(`/regiones/${id}`, { desc_region });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al actualizar la región:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Eliminar una región por ID\r\nexport const deleteRegion = async (id) => {\r\n    try {\r\n        const response = await api.delete(`/regiones/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al eliminar la región:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Obtener todas las comunas\r\nexport const getComunas = async () => {\r\n    try {\r\n        const response = await api.get('/comunas');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener las comunas:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Obtener una comuna por ID\r\nexport const getComunaById = async (id) => {\r\n    try {\r\n        const response = await api.get(`/comunas/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener la comuna por ID:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Obtener todas las comunas por ID de región\r\nexport const getComunasByRegion = async (id_region) => {\r\n    try {\r\n        const response = await api.get(`/comunasregion/${id_region}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al obtener las comunas por ID de región:', error.message);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Crear una nueva comuna\r\nexport const createComuna = async (desc_comuna, id_region) => {\r\n    try {\r\n        const response = await api.post('/comunas', { desc_comuna, id_region });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al crear la comuna:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Actualizar una comuna por ID\r\nexport const updateComuna = async (id, desc_comuna, id_region) => {\r\n    try {\r\n        const response = await api.put(`/comunas/${id}`, { desc_comuna, id_region });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al actualizar la comuna:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Eliminar una comuna por ID\r\nexport const deleteComuna = async (id) => {\r\n    try {\r\n        const response = await api.delete(`/comunas/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error al eliminar la comuna:', error.message);\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}