{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nexport default supabase;\nexport const obtenerClientes = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('CLIENTE').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerUsuario = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('USUARIO').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerOrdenesDeTrabajo = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('ORDEN_TRABAJO').select('*');\n  if (error) throw error;\n  return data;\n};\nexport const obtenerEmpleadoPorId = async idEmpleado => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\n  if (error) throw error;\n  return data;\n};\nexport const obtenerStatusPorId = async idStatus => {\n  const {\n    data,\n    error\n  } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\n  if (error) throw error;\n  return data;\n};\nexport const insertarOrdenTrabajo = async ordenTrabajo => {\n  const {\n    data,\n    error\n  } = await supabase.from('ORDEN_TRABAJO').insert([ordenTrabajo], {\n    returning: 'minimal'\n  }); // Opcional, especifica qué datos devolver después de la inserción\n\n  if (error) {\n    throw error;\n  }\n  return data;\n};\nexport const obtenerEmpleado = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('EMPLEADO').select('id_empleado, pnombre, apaterno, amaterno');\n  if (error) throw error;\n  // Combinar nombre, apellido paterno y apellido materno para mostrar el nombre completo en el combobox\n  const empleados = data.map(empleado => ({\n    ...empleado,\n    nombreCompleto: `${empleado.pnombre} ${empleado.apaterno} ${empleado.amaterno}`\n  }));\n  console.log('Empleados obtenidos:', empleados);\n  return empleados;\n};\nexport const obtenerClientesrun = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('CLIENTE').select('run_cliente, nombre_cliente');\n  if (error) throw error;\n  return data;\n};\nexport const subirImagen = async (file, folder = 'img1') => {\n  const fileExt = file.name.split('.').pop();\n  const fileName = `${Date.now()}-${file.name}`;\n  const filePath = `${folder}/${fileName}`;\n  try {\n    const response = await supabase.storage.from('imgOT').upload(filePath, file);\n    console.log(\"Respuesta de Supabase:\", response);\n    if (response.error) {\n      throw response.error;\n    }\n    const imageName = encodeURIComponent(response.data.path.split('/').pop()); // Obtener solo el nombre de la imagen y codificarlo\n    const imageUrl = `${supabase.storageUrl}/object/public/imgOT/${folder}/${imageName}`; // Construir la URL completa\n\n    console.log(\"URL de la imagen subida:\", imageUrl);\n    return {\n      publicUrl: imageUrl\n    }; // Devolvemos la URL de la imagen como 'publicUrl'\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseKey","supabase","obtenerClientes","data","error","from","select","obtenerUsuario","obtenerOrdenesDeTrabajo","obtenerEmpleadoPorId","idEmpleado","eq","single","obtenerStatusPorId","idStatus","insertarOrdenTrabajo","ordenTrabajo","insert","returning","obtenerEmpleado","empleados","map","empleado","nombreCompleto","pnombre","apaterno","amaterno","console","log","obtenerClientesrun","subirImagen","file","folder","fileExt","name","split","pop","fileName","Date","now","filePath","response","storage","upload","imageName","encodeURIComponent","path","imageUrl","storageUrl","publicUrl"],"sources":["C:/Users/felip/OneDrive/Documentos/GitHub/ARSHEEP/src/services/supa.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://niqxbeaxtqofvrboxnzb.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pcXhiZWF4dHFvZnZyYm94bnpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTQ4NTMyMDksImV4cCI6MjAzMDQyOTIwOX0.k025dPkt6rB55YNbs1elSUr-Zoi1CF5Of_HDOV3OENc';\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nexport default supabase;\r\n\r\nexport const obtenerClientes = async () => {\r\n    const { data, error } = await supabase.from('CLIENTE').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerUsuario = async () => {\r\n    const { data, error } = await supabase.from('USUARIO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerOrdenesDeTrabajo = async () => {\r\n    const { data, error } = await supabase.from('ORDEN_TRABAJO').select('*');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerEmpleadoPorId = async (idEmpleado) => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('*').eq('id_empleado', idEmpleado).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const obtenerStatusPorId = async (idStatus) => {\r\n    const { data, error } = await supabase.from('TIPO_STATUS').select('*').eq('status', idStatus).single();\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const insertarOrdenTrabajo = async (ordenTrabajo) => {\r\n    const { data, error } = await supabase\r\n        .from('ORDEN_TRABAJO')\r\n        .insert([ordenTrabajo], { returning: 'minimal' }); // Opcional, especifica qué datos devolver después de la inserción\r\n        \r\n    if (error) {\r\n        throw error;\r\n        \r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nexport const obtenerEmpleado = async () => {\r\n    const { data, error } = await supabase.from('EMPLEADO').select('id_empleado, pnombre, apaterno, amaterno');\r\n    if (error) throw error;\r\n    // Combinar nombre, apellido paterno y apellido materno para mostrar el nombre completo en el combobox\r\n    const empleados = data.map(empleado => ({\r\n        ...empleado,\r\n        nombreCompleto: `${empleado.pnombre} ${empleado.apaterno} ${empleado.amaterno}`\r\n    }));\r\n    console.log('Empleados obtenidos:', empleados);\r\n    return empleados;\r\n};\r\nexport const obtenerClientesrun = async () => {\r\n    const { data, error } = await supabase.from('CLIENTE').select('run_cliente, nombre_cliente');\r\n    if (error) throw error;\r\n    return data;\r\n};\r\n\r\nexport const subirImagen = async (file, folder = 'img1') => {\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${Date.now()}-${file.name}`;\r\n    const filePath = `${folder}/${fileName}`;\r\n\r\n    try {\r\n        const response = await supabase\r\n            .storage\r\n            .from('imgOT')\r\n            .upload(filePath, file);\r\n\r\n        console.log(\"Respuesta de Supabase:\", response);\r\n\r\n        if (response.error) {\r\n            throw response.error;\r\n        }\r\n\r\n        const imageName = encodeURIComponent(response.data.path.split('/').pop()); // Obtener solo el nombre de la imagen y codificarlo\r\n        const imageUrl = `${supabase.storageUrl}/object/public/imgOT/${folder}/${imageName}`; // Construir la URL completa\r\n\r\n        console.log(\"URL de la imagen subida:\", imageUrl);\r\n\r\n        return { publicUrl: imageUrl }; // Devolvemos la URL de la imagen como 'publicUrl'\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}